version: '3.8'

# ==============================================================================
# SIST_PIZZA - Canales Stack (WhatsApp + Chatwoot + N8N)
# Usar junto con docker-compose.yml principal o standalone
# Comando: docker-compose -f docker-compose.canales.yml up -d
# ==============================================================================

services:
  # ============================================================================
  # WAHA - WhatsApp HTTP API
  # Expone WhatsApp Business API vía HTTP
  # Docs: https://waha.devlike.pro/
  # Puerto: 3000
  # ============================================================================
  waha:
    image: devlikeapro/waha:latest
    container_name: sist_pizza_waha
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - WAHA_LOG_LEVEL=info
      - WAHA_PRINT_QR=True
      # Persistencia de sesiones
      - WHATSAPP_DEFAULT_ENGINE=WEBJS
      - WHATSAPP_RESTART_ALL_SESSIONS=True
    volumes:
      - waha_data:/app/.sessions
    networks:
      - sist_pizza_canales
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # PostgreSQL - Base de datos para Chatwoot y N8N
  # Puerto: 5433 (para no colisionar con la DB principal en 5432)
  # ============================================================================
  postgres_canales:
    image: postgres:15-alpine
    container_name: sist_pizza_postgres_canales
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=chatwoot
    volumes:
      - postgres_canales_data:/var/lib/postgresql/data
      # Script de inicialización para crear DB de N8N
      - ./docker/init-canales-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - sist_pizza_canales
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # Redis - Cache para Chatwoot
  # Puerto: 6380 (para no colisionar con Redis principal en 6379)
  # ============================================================================
  redis_canales:
    image: redis:7-alpine
    container_name: sist_pizza_redis_canales
    restart: unless-stopped
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_canales_data:/data
    networks:
      - sist_pizza_canales
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # Chatwoot - Multi-channel Support Platform
  # Docs: https://www.chatwoot.com/docs/self-hosted
  # Puerto: 3001
  # ============================================================================
  chatwoot_web:
    image: chatwoot/chatwoot:latest
    container_name: sist_pizza_chatwoot
    restart: unless-stopped
    ports:
      - "3001:3000"
    depends_on:
      postgres_canales:
        condition: service_healthy
      redis_canales:
        condition: service_healthy
    environment:
      # Database
      - POSTGRES_HOST=postgres_canales
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=chatwoot
      - POSTGRES_USERNAME=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      
      # Redis
      - REDIS_URL=redis://redis_canales:6379
      
      # Chatwoot Config
      - RAILS_ENV=production
      - NODE_ENV=production
      - INSTALLATION_ENV=docker
      - SECRET_KEY_BASE=${CHATWOOT_SECRET_KEY_BASE:-$(openssl rand -hex 64)}
      - FRONTEND_URL=${CHATWOOT_FRONTEND_URL:-http://localhost:3001}
      
      # Email (opcional - usar Mailtrap/MailHog para desarrollo)
      - MAILER_SENDER_EMAIL=${MAILER_SENDER_EMAIL:-noreply@pizzeria.local}
      - SMTP_ADDRESS=${SMTP_ADDRESS:-}
      - SMTP_PORT=${SMTP_PORT:-}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      
      # Storage (local por ahora)
      - ACTIVE_STORAGE_SERVICE=local
      
      # Features
      - ENABLE_ACCOUNT_SIGNUP=false
      - FORCE_SSL=false
    volumes:
      - chatwoot_storage:/app/storage
    networks:
      - sist_pizza_canales
    command: bundle exec rails s -p 3000 -b 0.0.0.0
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Chatwoot Sidekiq - Background jobs
  chatwoot_sidekiq:
    image: chatwoot/chatwoot:latest
    container_name: sist_pizza_chatwoot_sidekiq
    restart: unless-stopped
    depends_on:
      chatwoot_web:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres_canales
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=chatwoot
      - POSTGRES_USERNAME=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_URL=redis://redis_canales:6379
      - RAILS_ENV=production
      - NODE_ENV=production
      - INSTALLATION_ENV=docker
      - SECRET_KEY_BASE=${CHATWOOT_SECRET_KEY_BASE:-$(openssl rand -hex 64)}
    volumes:
      - chatwoot_storage:/app/storage
    networks:
      - sist_pizza_canales
    command: bundle exec sidekiq -C config/sidekiq.yml

  # ============================================================================
  # N8N - Workflow Automation
  # Docs: https://docs.n8n.io/
  # Puerto: 5678
  # ============================================================================
  n8n:
    image: n8nio/n8n:latest
    container_name: sist_pizza_n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    depends_on:
      postgres_canales:
        condition: service_healthy
    environment:
      # Database (usa la misma PostgreSQL de canales)
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres_canales
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      
      # N8N Config
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-admin123}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      
      # Timezone (Argentina)
      - GENERIC_TIMEZONE=America/Argentina/Buenos_Aires
      - TZ=America/Argentina/Buenos_Aires
      
      # Security
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-sist-pizza-n8n-key-2025}
      
      # Executions
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
      
      # Logs
      - N8N_LOG_LEVEL=info
    volumes:
      - n8n_data:/home/node/.n8n
      # Workflows pre-configurados (se crearán luego)
      - ./docker/n8n-workflows:/backup:ro
    networks:
      - sist_pizza_canales
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

# ==============================================================================
# NETWORKS
# ==============================================================================
networks:
  sist_pizza_canales:
    driver: bridge
    name: sist_pizza_canales

# ==============================================================================
# VOLUMES
# ==============================================================================
volumes:
  waha_data:
    name: sist_pizza_waha_data
  postgres_canales_data:
    name: sist_pizza_postgres_canales
  redis_canales_data:
    name: sist_pizza_redis_canales
  chatwoot_storage:
    name: sist_pizza_chatwoot_storage
  n8n_data:
    name: sist_pizza_n8n_data
