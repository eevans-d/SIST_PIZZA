# Multi-stage build para backend

# Stage 1: Build
FROM node:20-alpine AS builder

WORKDIR /app

# Copiar package*.json
COPY package*.json ./

# Instalar dependencias
RUN npm ci --only=production && \
    npm cache clean --force

# Copiar código fuente
COPY tsconfig.json ./
COPY src ./src

# Compilar TypeScript
RUN npm install --save-dev typescript @types/node && \
    npx tsc

# Stage 2: Runtime
FROM node:20-alpine

WORKDIR /app

# Crear usuario no-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copiar node_modules del builder
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copiar código compilado
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Cambiar a usuario nodejs
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"

# Variables de entorno
ENV NODE_ENV=production \
    PORT=3000

# Exponer puerto
EXPOSE 3000

# Iniciar aplicación
CMD ["node", "dist/server.js"]
